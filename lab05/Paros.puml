@startuml Paros
!theme cerulean-outline
class Paros{
{static}Paros()
{static}log: Log
{static}main(args: String[])
- cmdLine: CommandLine
- init(args: String[])
- run()
- runCommandLine()
- runGUI()
- showLicense()
- checkUpdate()
}

Paros --> SSLConnector
Paros ..> Constant: <<use>>
Paros ..> HttpSender: <<use>>
Paros *--> CommandLine
Paros *--> AboutWindow
Paros ..> Model: <<use>>
Paros ..> Control: <<use>>
Paros ..> View: <<use>>
Paros *--> LicenseFrame

class Constant{
+ Constant()
+ {static} getEyeCatcher(): String
+ {static} setEyeCatcher(eyeCatcher: String)
+ {static} setSP(isSP: boolean)
+ {static} isSP(): boolean
+ {static} getInstance(): Constant
+ {static} isWindows(): boolean
+ {static} isLinux(): boolean
+ {static} instance: Constant
+ {static} staticEyeCatcher: String
+ {static} staticSP: boolean
...
}

Constant *--> FileCopier

abstract class FileXML{
+ FileXML(rootElementName: String)
+ getDocument(): Document
# getElement(base: Element, childTag: String): Element
# getElement(tag: String): Element
# getElement(path: String[]): Element
# getElements(base: Element, childTag: String): Element[]
# getElements(tagName: String): Element[]
# getElements(path: String[]): Element[]
- getText(element: Element): String
# getValue(base: Element, tag: String): String
# getValue(tag: String): String
# getValues(tag: String): List
# {abstract} parse()
+ readAndParseFile(fileName: String)
# readFile(fileName: String)
+ saveFile(fileName: String)
+ setDocument(doc: Document)
# setValue(tagName: String, value: String)
# setValue(path: String[], value String)
# removeElement(base: Element, tag: String)
# removeElement(tag: String)
# addElement(base: Element, tag: String, value: String): Element
# addElement(base: Element, tag: String): Element
# addElement(tag: String): Element
# doc: Document
# docBuilder: DocumentBuilder
# docBuilderFactory: DocumentBuilderFactory
}

abstract class AbstractParam{
- config: FileConfiguration
+ load(config: FileConfiguration)
+ load(fileName: String)
+ load()
+ getConfig(): FileConfiguration
# {abstract} parse()
}

class Database{
+ Database()
+ getDatabaseServer(): DatabaseServer
- setDatabaseServer(databaseServer: DatabaseServer)
- setTableHistory(tableHistory TableHistory)
+ getTableHistory(): TableHistory
+ getTableSession(): TableSession
- setTableSession(tableSession: TableSession)
+ {static} getSingleton(): Database
+ addDatabaseListener(listener: DatabaseListener)
+ removeDatabaseListener(listener: SpiderListener)
- notifyListenerDatabaseOpen()
+ open(path: String)
+ close(compact: boolean)
+ getTableAlert(): TableAlert
+ setTableAlert(tableAlert: TableAlert)
+ getTableScan(): TableScan
+ setTableScan(tableScan: TableScan)

- {static} database: Database
- databaseServer: DatabaseServer
- tableHistory: TableHistory
- tableSession: TableSessios
- tableAlert: TableAlert
- tableScan: TableScan
- listenerList: Vector
}

Database o--> DatabaseServer
Database o--> TableHistory
Database o--> TableSession
Database o--> TableAlert
Database o--> TableScan
Database ..|> DatabaseListener
Database ..|> SpiderListener

class Control{
- Control(model: Model, view View)
- init()
+ getProxy(): Proxy
# addExtension()
+ getMenuFileControl(): MenuFileControl
+ getMenuToolsControl(): MenuToolsControl
+ shutdown(compact: boolean)
+ {static} getSingeleton(): Control
+ {static} initSingletonWithView()
+ {static} initSingletonWithoutView()
+ runCommandLineNewSession(fileName: String)
+ runCommandLineOpenSession(fileName: String)

- {static} log: Log
- {static} control: Control
- proxy: Proxy
- menuFileControl: MenuFileControl
- menuToolsControl: MenuToolsControl
}

Control --|> AbstractControl
Control ..> Model: <<use>>
Control ..> View: <<use>>
Control *--> Proxy
Control *--> MenuFileControl
Control *--> MenuToolsControl
Control ..> Session: <<create>>

abstract class AbstractControl{
+ AbstractControl(model: Model, view: View)
+ getExtensionLoader(): ExtensionLoader
# loadExtension()
# {abstract} addExtension()
# addCommonExtension()
+ shutdown(compact: boolean)

# loader: ExtensionLoader
# model: Model
# view: View
}

AbstractControl o--> Model
AbstractControl o--> View

class Proxy{
- model: Model
- proxyServer: ProxyServer
- proxyServerSSL: ProxyServerSSL
- reverseProxy: boolean
- reverseProxyHost: String
+ Proxy(model: Model)
+ startServer()
+ stopServer()
+ setSerialize(serialize: boolean)
+ addProxyListener(listener: ProxyListener)
+ removeProxyListener(listener: ProxyListener)
+ isReverseProxy(): boolean
+ setReverseProxy(reverseProxy: boolean)
+ getReverseProxyHost(): String
+ setReverseProxyHost(reverseProxyHost: String)
+ setEnableCacheProcessing(enableCacheProcessing: boolean)
+ addCacheProcessingList(item: CacheProcessingItem)
}

Proxy *--> ProxyServer
Proxy *--> ProxyServerSSL
Proxy o--> Model
Proxy ..|> ProxyListener
Proxy ..|> CacheProcessingItem

class MenuFileControl{
- {static} log: Log
- view: View
- model: Model
- control: Control
- waitMessageDialog: WaitMessageDialog
+ MenuFileControl(model: Model, view: View, control: Control)
+ exit()
+ newSession(isPromptNewSession: boolean)
+ openSession()
+ saveSession()
+ saveAsSession()
+ properties()
+ sessionOpened(file: File, e: Exception)
+ sessionSaved(e: Exception)
}

MenuFileControl ..|> SessionListener
MenuFileControl o--> Model
MenuFileControl o--> View
MenuFileControl o--> Control
MenuFileControl ..> Session: <<create>>

class MenuToolsControl{
- view: View
- model: Model
- control: Control
+ MenuToolsControl()
+ MenuToolsControl(model: Model, view: View, control: Control)
+ options()
}

MenuToolsControl o--> Model
MenuToolsControl o--> View
MenuToolsControl o--> Control

interface ViewDelegate{
+ getMainFrame(): MainFrame
+ getSiteTreePanel(): SiteMapPanel
+ getOutputPanel(): OutputPanel
+ showConfirmDialog(msg: String): int
+ showYesNoCancelDialog(msg: String): int
+ showWarningDialog(msg: String)
+ showMessageDialog(msg: String)
+ getWaitMessageDialog(msg: String): WaitMessageDialog
+ getPopupMenu(): MainPopupMenu
+ setStatus(msg: String)
+ getRequestPanel(): HttpPanel
+ getResponsePanel(): HttpPanel
}

class Model{
- {static} model: Model
- session: Session
- optionsParam: OptionsParam
- db: Database
- currentDBNameUntitled: String
+ Model()
+ getOptionsParam(): OptionsParam
+ setOptionsParam(param: OptionsParam)
+ getSession(): Session
+ setSession(paramSession: Session)
+ init()
+ {static} getSingleton(): Model
+ getDb(): Database
+ moveSessionDb(destFile: String)
+ copySessionDb(currentFile: String, destFile: String)
+ createAndOpenUntitledDb()
}

Model *--> Session
Model *--> OptionsParam
Model ..> Database: <<use>>
Model ..> FileCopier: <<use>>

class Session{
- model: Model
- fileName: String
- siteTree: SiteMap
+ Session(model: Model)
+ discard()
+ getSessionDesc(): String
+ getSessionId(): long
+ getSessionName(): String
+ getSiteTree(): SiteMap
+ isNewState(): boolean
+ open(file: File, callback: SessionListener)
+ open(fileName: String)
# parse()
+ save(fileName: String, callback: SessionListener)
+ save(fileName: String)
+ setSessionDesc(sessionDesc: String)
+ setSessionId(sessionId: long)
+ setSessionName(name: String)
+ getFileName(): String
- saveSiteTree(node: SiteNode)
- saveNodeMsg(msg: HttpMessage)
+ getSessionFolder(): String
}

Session --|> FileXML
Session o--> Model
Session o--> SiteMap
Session ..|> SessionListener
Session ..|> SiteNode
Session ..|> HttpMessage

class OptionsParam{
- proxyParam: ProxyParam
- connectionParam: ConnectionParam
- viewParam: OptionsParamView
- certificateParam: OptionsParamCertificate
+ getConnectionParam(): ConnectionParam
+ getProxyParam: ProxyParam
+ setProxyParam(proxyParam: ProxyParam)
+ OptionsParam()
+ setConnectionParam(connectionParam: ConnectionParam)
+ setViewParam(viewParam: OptionsParamView)
+ getViewParam(): OptionsParamView
+ setCertificateParam(certificateParam: OptionsParamCertificate)
+ getCertificateParam(): OptionsParamCertificate
+ addParamSet(paramSet: AbstractParam)
+ getParamSet(className: Class): AbstractParam
+ getConfig(): FileConfiguration
# parse()
+ isGUI(): boolean
+ setGUI(gui: boolean)
+ getUserDirectory(): File
+ setUserDirectory(currentDirectory: File)
}

OptionsParam --|> AbstractParam
OptionsParam *--> ProxyParam
OptionsParam *--> ConnectionParam
OptionsParam *--> OptionsParamView
OptionsParam *--> OptionsParamCertificate

class HttpUtil{
+ {static} encodeURI(uri: String): String
+ {static} sleep(ms: int)
+ {static} closeServerSocket(socket: ServerSocket)
+ {static} closeSocket(socket: Socket)
+ {static} closeInputStream(in: InputStream)
+ {static} closeOutputStream(out: OutputStream)
}

class ProxyServer{
# proxySocket: ServerSocket
# proxyParam: ProxyParam
# connectionParam: ConnectionParam
+ isEnableCacheProcessing(): boolean
+ setEnableCacheProcessing(enableCacheProcessing: boolean)
+ isSerialize(): boolean
+ ProxyServer()
+ setProxyParam(param: ProxyParam)
+ getProxyParam(): ProxyParam
+ setConnectionParam(connection: ConnectionParam)
+ getConnectionParam(): ConnectionParam
+ startServer(ip: String, port: int, isDynamicPort: boolean): int
+ stopServer(): boolean
+ run()
# createServerSocket(ip: String, port: int): ServerSocket
# createProxyProcess(clientSocket: Socket): ProxyThread
# writeOutput(s: String)
+ addProxyListener(listener: ProxyListener)
+ removeProxyListener(listener: ProxyListener)
getListenerList(): List
+ isAnyProxyThreadRunning(): boolean
+ setSerialize(serialize: boolean)
+ addCacheProcessingList(item: CacheProcessingItem)
getCacheProcessingList(): Vector
}

ProxyServer ..|> Runnable
ProxyServer *--> ProxyParam
ProxyServer *--> ConnectionParam
ProxyServer ..> HttpUtil: <<use>>
ProxyServer ..|> ProxyListener
ProxyServerSSL ..|> ProxyThread

class ProxyServerSSL{
- {static} ssl: SSLConnector
+ ProxyServerSSL()
# createServerSocket(ip: String, port: int): ServerSocket
# createProxyProcess(clientSocket: Socket): ProxyThread
}

ProxyServerSSL --|> ProxyServer
ProxyServerSSL ..|> SSLConnector
ProxyServerSSL ..> HttpSender: <<use>>
ProxyServerSSL ..|> ProxyThreadSSL

class ProxyParam{
- proxyIp: String
- proxyPort: int
- proxySSLPort: int
...
+ ProxyParam()
# parse()
+ getProxyIp(): String
+ setProxyIp(proxyIp: String)
+ getProxyPort(): int
+ setProxyPort(proxyPort: int)
+ getProxySSLPort(): int
+ getReverseProxyIp(): String
+ setReverseProxyIp(reverseProxyIp: String)
+ getReverseProxyHttpPort(): int
+ setREverseProxyHttpPort(reverseProxyHttpPort: int)
+ getReverseProxyHttpsPort(): int
+ setReverseProxyHttpsPort(reverseProxyHttpsPort: int)
+ isUseReverseProxy(): boolean
+ setUseReverseProxy(isUse: boolean)
}

ProxyParam --> AbstractParam

class ProxyThread{
- {static} log:  Log
# parentServer: ProxyServer
# proxyParam: ProxyParam
# connectionParam: ConnectionParam
# httpIn: HttpInputStream
# httpOut: HttpOutputStream
# originProcess: ProxyThread
- httpSender: HttpSender
...
ProxyThread(server: ProxyServer, socket: Socket)
+ start()
- beginSSL()
+ run()
# ProcessHttp(requestHeader: HttpRequestHeader, isSecure: boolean)
- isConnectionClose(msg: HttpMessage): boolean
# disconnect()
- notifyListenerRequestSend(httpMessage: HttpMessage)
- notifyListenerResponseReceive(httpMessage: HttpMessage)
- isRecursive(header: HttpRequestHeader)
- modifyHeader(msg: HttpMessage)
# getHttpSender(): HttpSender
{static} isAnyProxyThreadRunning(): boolean
# isProcessCache(msg: HttpMessage): boolean
}

ProxyThread ..|> Runnable
ProxyThread o--> ProxyServer
ProxyThread o--> ProxyParam
ProxyThread o--> ConnectionParam
ProxyThread *--> HttpInputStream
ProxyThread *--> HttpOutputStream
ProxyThread --> HttpSender: <<use>>
ProxyThread ..|> HttpRequestHeader
ProxyThread ..|> HttpBody
ProxyThread ..|> HttpMessage
ProxyThread ..> Model: <<use>>
ProxyThread ..|> RecordHistory

class View{
- {static} view: View
- sessionDialog: SessionDialog
- optionsDialog: OptionsDialog
- mainFrame: MainFrame
- requestPanel: HttpPanel
- responsePanel: HttpPanel
- siteMapPanel: SiteMapPanel
- outputPanel: OutputPanel
+ getMainFrame(): MainFrame
+ init()
+ postInit()
+ showConfirmDialog(msg: String): int
+ showYesNoCancelDialog(msg: String): int
+ showWarningDialog(msg: String)
+ showMessageDialog(msg: String)
+ {static} getSingleton(): View
+ getSiteTreePanel(): SiteMapPanel
+ getOutputPanel(): OutputPanel
+ getRequestPanel(): HttpPanel
+ getResponsePanel(): HttpPanel
+ getSessionDialog(title: String): SessionDialog
+ OptionsDialog(ttitle: String)
+ getOptionsDialog(title: String): OptionsDialog
+ getWorkBench(): WorkbenchPanel
+ setStatus(msg: String)
+ getPopupMenu(): MainPopupMenu
+ getPopupList(): Vector
+ getWaitMessageDialog(s: String): WaitMessageDialog
}

View ..|> ViewDelegate
View *--> MainFrame
View *--> SiteMapPanel
View *--> OutputPanel
View *--> HttpPanel
View *--> SessionDialog
View *--> OptionsDialog
View ..|> WorkbenchPanel
View *--> MainPopupMenu
View ..|> WaitMessageDialog
@enduml